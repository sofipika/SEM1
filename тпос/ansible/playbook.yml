---
- name: Playbook

  hosts: all
  gather_facts: no
  become: yes

  handlers:
  
    - name: restart nginx
      service: 
        name: nginx 
        state: restarted

    - name: start nginx
      service: 
        name: nginx 
        state: started

    - name: reload nginx
      service: 
        name: nginx 
        state: reloaded   
      
      
      
  tasks:

    - name: Установка nginx
      apt:
        name: nginx
        state: latest
      notify:
        - start nginx

    
    - name: Копирование конфиг файла nginx
      copy: 
        src: "tmp/my_site.conf"
        dest: "/etc/nginx/sites-available/my_site.conf"
      notify:
        - reload nginx
        - start nginx
        
    - name: Создание линка для конфиг файла nginx
      file:
        src: /etc/nginx/sites-available/my_site.conf
        dest: /etc/nginx/sites-enabled/default
        state: link
      notify:
        - reload nginx
        - start nginx
    
    - name: Проверка файла /opt/service_state
      stat: 
        path: /opt/service_state
      register: service_state

    - debug:
        msg: "Существует ли файл /opt/service_state? - {{service_state.stat.exists}} "

    - name: Получить uptime
      when: service_state.stat.exists
      shell: "awk 'NR==2' /opt/service_state | grep -o '[0-9]*'"
      register: uptime
     
    - name: Проверка апдейтится ли файл /opt/service_state
      when: service_state.stat.exists and uptime.stdout == "0"
      fail:
        msg: "Похоже сервис не работает, uptime = 0"

    - name: Чтение первой строки удаленного файла /opt/service_state
      when: service_state.stat.exists
      shell: "head -n 1 /opt/service_state"
      register: first_line_remote

    - name: Чтение первой строки локального файла tmp/service_state
      when: service_state.stat.exists
      become: no
      local_action: 
        module: shell  
        cmd: "head -n 1 tmp/service_state"
      register: first_line_local
      
    - name: Копирование файла service_state
      when: (not service_state.stat.exists) or (first_line_remote.stdout != first_line_local.stdout)
      copy:
        src: "tmp/service_state"
        dest: "/opt/service_state"
        mode: '0664'
      notify:
        - restart nginx

    - name: Добавление задачи в cron
      cron:
        name: "nginx"
        minute: "*/1"
        job: "sed -i \"s/is .*$/is $(($(ps -o etimes= -p $(cat /var/run/nginx.pid)) / 60)) minutes/\" /opt/service_state"


